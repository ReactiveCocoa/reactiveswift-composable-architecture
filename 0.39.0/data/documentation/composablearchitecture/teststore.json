{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"LocalState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"LocalAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Environment"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This object aids in writing expressive and exhaustive tests for features built in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each"},{"type":"text","text":" "},{"type":"text","text":"step of the way you must assert exactly how state changed, and how effect emissions were fed"},{"type":"text","text":" "},{"type":"text","text":"back into the system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are multiple ways the test store forces you to exhaustively assert on how your feature"},{"type":"text","text":" "},{"type":"text","text":"behaves:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After each action is sent you must describe precisely how the state changed from before"},{"type":"text","text":" "},{"type":"text","text":"the action was sent to after it was sent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If even the smallest piece of data differs the test will fail. This guarantees that you"},{"type":"text","text":" "},{"type":"text","text":"are proving you know precisely how the state of the system changes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect emits"},{"type":"text","text":" "},{"type":"text","text":"an action that is fed back into the system, you "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" explicitly assert that you expect"},{"type":"text","text":" "},{"type":"text","text":"to receive that action from the effect, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" you must assert how state changed as a"},{"type":"text","text":" "},{"type":"text","text":"result."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect emissions the"},{"type":"text","text":" "},{"type":"text","text":"assertion will fail. This guarantees that you do not accidentally forget about an effect"},{"type":"text","text":" "},{"type":"text","text":"emission, and that the sequence of steps you are describing will mimic how the application"},{"type":"text","text":" "},{"type":"text","text":"behaves in reality."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All effects must complete by the time the assertion has finished running the steps you"},{"type":"text","text":" "},{"type":"text","text":"specify."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If at the end of the assertion there is still an in-flight effect running, the assertion"},{"type":"text","text":" "},{"type":"text","text":"will fail. This helps exhaustively prove that you know what effects are in flight and"},{"type":"text","text":" "},{"type":"text","text":"forces you to prove that effects will not cause any future changes to your state."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple counter reducer:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterState {","  var count = 0","}","enum CounterAction: Equatable {","  case decrementButtonTapped","  case incrementButtonTapped","}","","let counterReducer = Reducer<CounterState, CounterAction, Void> { state, action, _ in","  switch action {","  case .decrementButtonTapped:","    state.count -= 1","    return .none","","  case .incrementButtonTapped:","    state.count += 1","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can assert against its behavior over time:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class CounterTests: XCTestCase {","  func testCounter() async {","    let store = TestStore(","      initialState: CounterState(count: 0),     \/\/ Given a counter state of 0","      reducer: counterReducer,","      environment: ()","    )","    await store.send(.incrementButtonTapped) {  \/\/ When the increment button is tapped","      $0.count = 1                              \/\/ Then the count should be 1","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that in the trailing closure of "},{"type":"codeVoice","code":".send(.incrementButtonTapped)"},{"type":"text","text":" we are given a single"},{"type":"text","text":" "},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value"},{"type":"text","text":" "},{"type":"text","text":"to match the state after the action was sent. In this case the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" field changes to "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a more complex example, consider the following bare-bones search feature that uses the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Effect\/debounce(id:for:scheduler:options:)-76yye"},{"type":"text","text":" operator to wait for the user to stop"},{"type":"text","text":" "},{"type":"text","text":"typing before making a network request:"}]},{"type":"codeListing","syntax":"swift","code":["struct SearchState: Equatable {","  var query = \"\"","  var results: [String] = []","}","","enum SearchAction: Equatable {","  case queryChanged(String)","  case response([String])","}","","struct SearchEnvironment {","  var mainQueue: AnySchedulerOf<DispatchQueue>","  var request: (String) async throws -> [String]","}","","let searchReducer = Reducer<SearchState, SearchAction, SearchEnvironment> {","  state, action, environment in","    switch action {","    case let .queryChanged(query):","      enum SearchID {}","","      state.query = query","      return .run { send in","        guard let results = try? await environment.request(query) else { return }","        send(.response(results))","      }","      .debounce(id: SearchID.self, for: 0.5, scheduler: environment.mainQueue)","","    case let .response(results):","      state.results = results","      return .none","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be fully tested by controlling the environment’s scheduler and effect:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Create a test dispatch scheduler to control the timing of effects","let mainQueue = TestScheduler()","","let store = TestStore(","  initialState: SearchState(),","  reducer: searchReducer,","  environment: SearchEnvironment(","    \/\/ Wrap the test scheduler in a type-erased scheduler","    mainQueue: mainQueue.eraseToAnyScheduler(),","    \/\/ Simulate a search response with one item","    request: { [\"Composable Architecture\"] }","  )",")","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the queue by a period shorter than the debounce","await mainQueue.advance(by: 0.25)","","\/\/ Change the query again","await store.send(.searchFieldChanged(\"co\") {","  $0.query = \"co\"","}","","\/\/ Advance the queue by a period shorter than the debounce","await mainQueue.advance(by: 0.25)","\/\/ Advance the scheduler to the debounce","await scheduler.advance(by: 0.25)","","\/\/ Assert that the expected response is received","await store.receive(.response([\"Composable Architecture\"])) {","  \/\/ Assert that state updates accordingly","  $0.results = [\"Composable Architecture\"]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test is proving that the debounced network requests are correctly canceled when we do not"},{"type":"text","text":" "},{"type":"text","text":"wait longer than the 0.5 seconds, because if it wasn’t and it delivered an action when we did"},{"type":"text","text":" "},{"type":"text","text":"not expect it would cause a test failure."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/teststore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"title":"TestStore","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:22ComposableArchitecture9TestStoreC","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"title":"Creating a Test Store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:environment:file:line:)"]},{"title":"Configuring a Test Store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/environment","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout"]},{"title":"Testing a Reducer","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-7vwv9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:_:file:line:)-88eyr","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)-53gi5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"]},{"title":"Accessing State","abstract":[{"type":"text","text":"While the most common way of interacting with a test store’s state is via its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-7vwv9"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:_:file:line:)-88eyr"},{"type":"text","text":" methods, you may also access it directly throughout a test."}],"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"]},{"title":"Scoping a Test Store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)"]},{"title":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"role":"collectionGroup","title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported test store APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/teststoredeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:action:)":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes a store to assert against more local state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"role":"symbol","title":"timeout","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"}],"abstract":[{"type":"text","text":"The timeout to await for in-flight effects."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/timeout"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"role":"symbol","title":"TestStoreTask","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStoreTask"}],"abstract":[{"type":"text","text":"The type returned from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-7vwv9"},{"type":"text","text":" that represents the lifecycle"},{"type":"text","text":" "},{"type":"text","text":"of the effect started from sending an action."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"url":"\/documentation\/composablearchitecture\/teststoretask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:_:file:line:)-7vwv9":{"conformance":{"constraints":[{"type":"codeVoice","code":"LocalState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"send(_:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":", (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-7vwv9","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:_:file:line:)-7vwv9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:_:file:line:)-88eyr":{"conformance":{"constraints":[{"type":"codeVoice","code":"LocalState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"receive(_:timeout:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:_:file:line:)-88eyr","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:_:file:line:)-88eyr"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:file:line:)-53gi5":{"role":"symbol","title":"finish(timeout:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Suspends until all in-flight effects have finished, or until it times out."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)-53gi5","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:file:line:)-53gi5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:environment:file:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" is "},{"type":"codeVoice","code":"LocalState"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"type":"codeVoice","code":"LocalAction"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(initialState:reducer:environment:file:line:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a test store from an initial state, a reducer, and an initial environment."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:environment:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:environment:file:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/environment":{"role":"symbol","title":"environment","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"environment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Environment"}],"abstract":[{"type":"text","text":"The current environment."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/environment","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/environment"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"role":"symbol","title":"state","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"}],"abstract":[{"type":"text","text":"The current state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:)":{"role":"symbol","title":"scope(state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"LocalState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LocalAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes a store to assert against more local state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:)"}}}