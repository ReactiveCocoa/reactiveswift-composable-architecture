{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyHashable","preciseIdentifier":"s:s11AnyHashableV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"every"},{"kind":"text","text":" "},{"kind":"internalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTimeInterval","preciseIdentifier":"s:8Dispatch0A12TimeIntervalO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTimeInterval","preciseIdentifier":"s:8Dispatch0A12TimeIntervalO"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":" "},{"kind":"internalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DateScheduler","preciseIdentifier":"s:13ReactiveSwift13DateSchedulerP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectProducer","preciseIdentifier":"s:22ComposableArchitecture14EffectProducerV","text":"EffectProducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"id","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The effectâ€™s identifier."}]}]},{"name":"interval","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The time interval on which to publish events. For example, a value of "},{"type":"codeVoice","code":"0.5"},{"type":"text","text":" "},{"type":"text","text":"publishes an event approximately every half-second."}]}]},{"name":"scheduler","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The scheduler on which the timer runs."}]}]},{"name":"tolerance","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed timing variance when emitting events. Defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", which"},{"type":"text","text":" "},{"type":"text","text":"allows any variance."}]}]},{"name":"options","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scheduler options passed to the timer. Defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is basically a wrapper around the ReactiveSwift "},{"type":"codeVoice","code":"SignalProducer.timer"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"and which adds the the ability to be cancelled via the "},{"type":"codeVoice","code":"id"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is why we provide "},{"type":"codeVoice","code":"EffectTask.timer"},{"type":"text","text":". It allows you to create a timer that works with any"},{"type":"text","text":" "},{"type":"text","text":"scheduler, not just a run loop, which means you can use a "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":" or "},{"type":"codeVoice","code":"RunLoop"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"text","text":"running your live app, but use a "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" in tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To start and stop a timer in your feature you can create the timer effect from an action"},{"type":"text","text":" "},{"type":"text","text":"and then use the "},{"type":"codeVoice","code":"EffectProducer\/cancel(id:)-6hzsl"},{"type":"text","text":" effect to stop the timer:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State { var count = 0 }","  enum Action { case startButtonTapped, stopButtonTapped, timerTicked }","  @Dependency(\\.mainQueueScheduler) var mainQueue","  struct TimerID: Hashable {}","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .startButtonTapped:","      return EffectTask.timer(id: TimerID(), every: 1, on: self.mainQueue)","        .map { _ in .timerTicked }","","    case .stopButtonTapped:","      return .cancel(id: TimerID())","","    case .timerTicked:","      state.count += 1","      return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then to test the timer in this feature you can use a test scheduler to advance time:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","func testTimer() async {","  let mainQueue = TestScheduler()","","  let store = TestStore(","    initialState: Feature.State(),","    reducer: Feature()","  ) {","    $0.mainQueueScheduler = mainQueue","  }","","  await store.send(.startButtonTapped)","","  await mainQueue.advance(by: .seconds(1))","  await store.receive(.timerTicked) { $0.count = 1 }","","  await mainQueue.advance(by: .seconds(5))","  await store.receive(.timerTicked) { $0.count = 2 }","  await store.receive(.timerTicked) { $0.count = 3 }","  await store.receive(.timerTicked) { $0.count = 4 }","  await store.receive(.timerTicked) { $0.count = 5 }","  await store.receive(.timerTicked) { $0.count = 6 }","","  await store.send(.stopButtonTapped)","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/effectproducer\/timer(id:every:tolerance:on:)-1cfdi"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectProducer\/timer(id:every:tolerance:on:)-1cfdi","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns an effect that repeatedly emits the current time of the given scheduler on the given"},{"type":"text","text":" "},{"type":"text","text":"interval."}],"kind":"symbol","metadata":{"modules":[{"name":"ComposableArchitecture"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"timer(id:every:tolerance:on:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyHashable","preciseIdentifier":"s:s11AnyHashableV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"every"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTimeInterval","preciseIdentifier":"s:8Dispatch0A12TimeIntervalO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTimeInterval","preciseIdentifier":"s:8Dispatch0A12TimeIntervalO"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DateScheduler","preciseIdentifier":"s:13ReactiveSwift13DateSchedulerP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectProducer","preciseIdentifier":"s:22ComposableArchitecture14EffectProducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:22ComposableArchitecture14EffectProducerVAA10Foundation4DateVRszs5NeverORs_rlE5timer2id5every9tolerance2onACyAfHGs11AnyHashableV_8Dispatch0O12TimeIntervalOASSg13ReactiveSwift0F9Scheduler_ptFZ","extendedModule":"ComposableArchitecture","platforms":[]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectProducer"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'clock.timer' in an 'Effect.run', instead."}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"role":"symbol","title":"EffectTask","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectTask"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectTask"}],"url":"\/documentation\/composablearchitecture\/effecttask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectProducer":{"deprecated":true,"role":"symbol","title":"EffectProducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectProducer"}],"abstract":[{"type":"text","text":"This type is deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":". See its documentation for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectProducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectProducer"}],"url":"\/documentation\/composablearchitecture\/effectproducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectProducer/timer(id:every:tolerance:on:)-1cfdi":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"timer(id:every:tolerance:on:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyHashable","preciseIdentifier":"s:s11AnyHashableV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"every"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTimeInterval","preciseIdentifier":"s:8Dispatch0A12TimeIntervalO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchTimeInterval","preciseIdentifier":"s:8Dispatch0A12TimeIntervalO"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DateScheduler","preciseIdentifier":"s:13ReactiveSwift13DateSchedulerP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectProducer","preciseIdentifier":"s:22ComposableArchitecture14EffectProducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an effect that repeatedly emits the current time of the given scheduler on the given"},{"type":"text","text":" "},{"type":"text","text":"interval."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectProducer\/timer(id:every:tolerance:on:)-1cfdi","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/effectproducer\/timer(id:every:tolerance:on:)-1cfdi"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"}}}